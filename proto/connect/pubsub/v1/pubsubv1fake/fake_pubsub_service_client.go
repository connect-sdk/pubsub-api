// Code generated by counterfeiter. DO NOT EDIT.
package pubsubv1fake

import (
	"context"
	"sync"

	pubsubv1 "github.com/connect-sdk/pubsub-api/proto/connect/pubsub/v1"
)

type FakePubsubServiceClient struct {
	PushPubsubMessageStub        func(context.Context, *pubsubv1.PubsubMessage) error
	pushPubsubMessageMutex       sync.RWMutex
	pushPubsubMessageArgsForCall []struct {
		arg1 context.Context
		arg2 *pubsubv1.PubsubMessage
	}
	pushPubsubMessageReturns struct {
		result1 error
	}
	pushPubsubMessageReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePubsubServiceClient) PushPubsubMessage(arg1 context.Context, arg2 *pubsubv1.PubsubMessage) error {
	fake.pushPubsubMessageMutex.Lock()
	ret, specificReturn := fake.pushPubsubMessageReturnsOnCall[len(fake.pushPubsubMessageArgsForCall)]
	fake.pushPubsubMessageArgsForCall = append(fake.pushPubsubMessageArgsForCall, struct {
		arg1 context.Context
		arg2 *pubsubv1.PubsubMessage
	}{arg1, arg2})
	stub := fake.PushPubsubMessageStub
	fakeReturns := fake.pushPubsubMessageReturns
	fake.recordInvocation("PushPubsubMessage", []interface{}{arg1, arg2})
	fake.pushPubsubMessageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePubsubServiceClient) PushPubsubMessageCallCount() int {
	fake.pushPubsubMessageMutex.RLock()
	defer fake.pushPubsubMessageMutex.RUnlock()
	return len(fake.pushPubsubMessageArgsForCall)
}

func (fake *FakePubsubServiceClient) PushPubsubMessageCalls(stub func(context.Context, *pubsubv1.PubsubMessage) error) {
	fake.pushPubsubMessageMutex.Lock()
	defer fake.pushPubsubMessageMutex.Unlock()
	fake.PushPubsubMessageStub = stub
}

func (fake *FakePubsubServiceClient) PushPubsubMessageArgsForCall(i int) (context.Context, *pubsubv1.PubsubMessage) {
	fake.pushPubsubMessageMutex.RLock()
	defer fake.pushPubsubMessageMutex.RUnlock()
	argsForCall := fake.pushPubsubMessageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePubsubServiceClient) PushPubsubMessageReturns(result1 error) {
	fake.pushPubsubMessageMutex.Lock()
	defer fake.pushPubsubMessageMutex.Unlock()
	fake.PushPubsubMessageStub = nil
	fake.pushPubsubMessageReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePubsubServiceClient) PushPubsubMessageReturnsOnCall(i int, result1 error) {
	fake.pushPubsubMessageMutex.Lock()
	defer fake.pushPubsubMessageMutex.Unlock()
	fake.PushPubsubMessageStub = nil
	if fake.pushPubsubMessageReturnsOnCall == nil {
		fake.pushPubsubMessageReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pushPubsubMessageReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePubsubServiceClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pushPubsubMessageMutex.RLock()
	defer fake.pushPubsubMessageMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePubsubServiceClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pubsubv1.PubsubServiceClient = new(FakePubsubServiceClient)
