// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: connect/pubsub/v1/pubsub.proto

package pubsubv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/connect-sdk/pubsub-api/proto/connect/pubsub/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// PubsubServiceName is the fully-qualified name of the PubsubService service.
	PubsubServiceName = "connect.pubsub.v1.PubsubService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PubsubServicePushPubsubMessageProcedure is the fully-qualified name of the PubsubService's
	// PushPubsubMessage RPC.
	PubsubServicePushPubsubMessageProcedure = "/connect.pubsub.v1.PubsubService/PushPubsubMessage"
)

// PubsubServiceClient is a client for the connect.pubsub.v1.PubsubService service.
type PubsubServiceClient interface {
	// PushPubsubMessage pushes a given message to connect.runtime.v1.MessageService service.
	PushPubsubMessage(context.Context, *connect.Request[v1.PushPubsubMessageRequest]) (*connect.Response[v1.PushPubsubMessageResponse], error)
}

// NewPubsubServiceClient constructs a client for the connect.pubsub.v1.PubsubService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPubsubServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PubsubServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pubsubServiceClient{
		pushPubsubMessage: connect.NewClient[v1.PushPubsubMessageRequest, v1.PushPubsubMessageResponse](
			httpClient,
			baseURL+PubsubServicePushPubsubMessageProcedure,
			opts...,
		),
	}
}

// pubsubServiceClient implements PubsubServiceClient.
type pubsubServiceClient struct {
	pushPubsubMessage *connect.Client[v1.PushPubsubMessageRequest, v1.PushPubsubMessageResponse]
}

// PushPubsubMessage calls connect.pubsub.v1.PubsubService.PushPubsubMessage.
func (c *pubsubServiceClient) PushPubsubMessage(ctx context.Context, req *connect.Request[v1.PushPubsubMessageRequest]) (*connect.Response[v1.PushPubsubMessageResponse], error) {
	return c.pushPubsubMessage.CallUnary(ctx, req)
}

// PubsubServiceHandler is an implementation of the connect.pubsub.v1.PubsubService service.
type PubsubServiceHandler interface {
	// PushPubsubMessage pushes a given message to connect.runtime.v1.MessageService service.
	PushPubsubMessage(context.Context, *connect.Request[v1.PushPubsubMessageRequest]) (*connect.Response[v1.PushPubsubMessageResponse], error)
}

// NewPubsubServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPubsubServiceHandler(svc PubsubServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pubsubServicePushPubsubMessageHandler := connect.NewUnaryHandler(
		PubsubServicePushPubsubMessageProcedure,
		svc.PushPubsubMessage,
		opts...,
	)
	return "/connect.pubsub.v1.PubsubService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PubsubServicePushPubsubMessageProcedure:
			pubsubServicePushPubsubMessageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPubsubServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPubsubServiceHandler struct{}

func (UnimplementedPubsubServiceHandler) PushPubsubMessage(context.Context, *connect.Request[v1.PushPubsubMessageRequest]) (*connect.Response[v1.PushPubsubMessageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("connect.pubsub.v1.PubsubService.PushPubsubMessage is not implemented"))
}
